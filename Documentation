<html><head><meta content="text/html; charset=UTF-8" http-equiv="content-type"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=t5YsyKnlDc3n4vem6Ge4Y0jrLXt4oFzAy2FhdDAmUdc');ol{margin:0;padding:0}table td,table th{padding:0}.c5{padding-top:18pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c7{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:"Arial";font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c4{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Roboto Mono";font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c12{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c14{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:center}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left;height:11pt}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c9{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c18{font-weight:700;font-size:20pt;font-family:"Arial"}.c10{font-weight:400;font-size:20pt;font-family:"Arial"}.c17{background-color:#ffffff;max-width:523.4pt;padding:54pt 36pt 54pt 36pt}.c13{font-weight:400;font-size:20pt;font-family:"Roboto"}.c15{margin-left:290.6pt;text-indent:-290.6pt}.c16{font-family:"Courier New";font-weight:400}.c6{font-weight:400;font-family:"Roboto Mono"}.c11{font-size:10pt}.c8{font-size:12pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class="c17 doc-content"><h1 class="c14" id="h.lopme3lt6gg9"><span class="c9 c18">CS60002: Distributed Systems</span></h1><h1 class="c14" id="h.rd6axltpvtjl"><span>Assignment 2: </span><span class="c9 c13">Documentation</span></h1><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c8">This section contains the entire documentation of the </span><span class="c6 c11">myConsumer</span><span class="c8">&nbsp;and </span><span class="c6 c11">myProducer</span><span class="c7">&nbsp;classes, which are basically client-level classes making interactions with the distributed queue easier for users.</span></p><h1 class="c12" id="h.b5nlrqo9k2ev"><span>The </span><span class="c6">myConsumer</span><span class="c9 c10">&nbsp;class for Consumers</span></h1><p class="c1"><span class="c8">The </span><span class="c6 c8">myConsumer.register</span><span class="c7">&nbsp;attribute stores a dictionary of all the topics, corresponding IDs of the consumer and the number of partitions in the topic. </span></p><h2 class="c5" id="h.vfefqns4wqvw"><span>Creation of a </span><span class="c6">myConsumer</span><span class="c3">&nbsp;instance</span></h2><p class="c1"><span class="c8">A </span><span class="c6 c8">myConsumer</span><span class="c7">&nbsp;object can be called by specifying a list of topics, which the consumer needs to subscribe to. This list can be empty, which means that the consumer does not need to subscribe to any topic currently. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myConsumer(topics = [&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">b = myConsumer(topics = [], broker = &#39;localhost:6000&#39;)</span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c7">If one or more topics in this list are not present in the database, they are NOT created, instead an error message is printed on the console. However, creation of IDs for topics present in the database continues normally. </span></p><h2 class="c5" id="h.j35iujb9kqtw"><span class="c6">myConsumer.registerForTopics(list)</span><span class="c3">: Registering for more topics</span></h2><p class="c1"><span class="c8">Registering for more topics is allowed. A consumer can register for more topics by calling the </span><span class="c6 c8">registerForTopics</span><span class="c7">&nbsp;function. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myConsumer(topics = [&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c6">a.registerForTopics([&#39;t3&#39;])</span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c8">This function first checks if the topic is not already registered, if it is it is simply ignored (and a message is printed on the console). Otherwise, we register the consumer for this topic. The </span><span class="c6 c8">register</span><span class="c7">&nbsp;attribute with all the topics and consumer IDs is then returned.</span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><h2 class="c5" id="h.98kacsug6usy"><span class="c6">myConsumer.login(dict)</span><span class="c3">: Logging in</span></h2><p class="c1"><span class="c7">For consumers to login with their topic-specific IDs to a given topic, they can use the login functionality</span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">a.login({</span></p><p class="c1"><span class="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;t3&#39;: 4920342034, </span></p><p class="c1"><span class="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;t4&#39;: 4932053405</span></p><p class="c1"><span class="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c7">The above command checks if these IDs are valid and then adds these ids to the consumer. </span></p><p class="c0"><span class="c7"></span></p><h2 class="c5" id="h.j86z6gnj22zt"><span class="c6">myConsumer.getID(topic)</span><span class="c3">: Getting the Consumer IDs for a topic</span></h2><p class="c1"><span class="c7">This function is used to retrieve the topic-specific consumer ID. It returns a `dict` with topic names as keys and IDs as values. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">id_dict &nbsp;= a.getID(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><p class="c0"><span class="c2"></span></p><h2 class="c5" id="h.vbj91d3e0u1t"><span class="c6">myConsumer.getIDs(topic)</span><span class="c3">: Getting the Consumer IDs for topics</span></h2><p class="c1"><span class="c7">This function is used to retrieve the topic-specific consumer ID for multiple topics. It returns a `dict` with topic names as keys and IDs as values. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c6">id_dict2 = a.getIDs([&#39;t1&#39;, &#39;t2&#39;]) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><h2 class="c5" id="h.q24d4x599yxj"><span class="c6">myConsumer.getPartitions(topic)</span><span class="c3">: Getting the Consumer IDs for a topic</span></h2><p class="c1"><span class="c7">This function is used to retrieve the topic-specific consumer ID. It returns a `dict` with topic names as keys and IDs as values. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">id_dict = a.getPartitions(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><p class="c1"><span class="c4">id_dict2 = a.getPartitions([&#39;t1&#39;, &#39;t2&#39;]) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><p class="c0"><span class="c2"></span></p><h2 class="c5" id="h.4nadlpn2plvs"><span class="c6">myConsumer.getQueueSize(topic)</span><span class="c3">: Get the size of queue for a particular topic</span></h2><p class="c1"><span class="c7">This function is used to find how many messages are left in the topic-specific queue for this consumer. It returns a dictionary with partitions as the key and their corresponding queue size as value.</span></p><p class="c0"><span class="c6 c8 c9"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">x = a.getQueueSize(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><p class="c0"><span class="c2"></span></p><p class="c0"><span class="c2"></span></p><h2 class="c5" id="h.2sqcfccbidqp"><span class="c6">myConsumer.getNextMessage(topic, partition = None)</span><span class="c3">: Get the next message in the topic-specific queue</span></h2><p class="c1"><span class="c8">This function returns the next message in the topic queue for this consumer from a particular topic if it is mentioned or from the next partition in the round robin and returns </span><span class="c8 c16">None</span><span class="c8">&nbsp;if there is no message.</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">msg = a.getNextMessage(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns str or None</span></p><p class="c0"><span class="c4"></span></p><p class="c0"><span class="c2"></span></p><h2 class="c5" id="h.kluo0m4nf0fy"><span class="c6">myConsumer.getAllTopics()</span><span class="c3">: Returns a list of all topics</span></h2><p class="c1"><span class="c8">This function returns the list of all topics.</span><span class="c2">&nbsp;</span></p><p class="c0"><span class="c4"></span></p><p class="c1"><span class="c4">a = myConsumer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">topics = a.getAllTopics(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns list</span></p><p class="c0"><span class="c4"></span></p><h1 class="c12" id="h.5svagovmrfdo"><span>The </span><span class="c6">myProducer</span><span class="c9 c10">&nbsp;class for Producers</span></h1><p class="c1"><span class="c8">The </span><span class="c6 c8">myProducer.register</span><span class="c8">&nbsp;attribute stores a dictionary of all the topics, corresponding IDs of the producer and the number of partitions in the topic. </span></p><h2 class="c5" id="h.loswyjpa4avw"><span>Creation of a </span><span class="c6">myProducer</span><span class="c3">&nbsp;instance</span></h2><p class="c1"><span class="c8">A </span><span class="c6 c8">myProducer</span><span class="c7">&nbsp;object can be called by specifying a list of topics, which the producer needs to subscribe to. This list can be empty, which means that the producer does not need to subscribe to any topic currently. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myProducer(topics = [&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">b = myProducer(topics = [], broker = &#39;localhost:6000&#39;)</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c7">If one or more topics in this list are not present in the database, they are NOT created, instead an error message is printed on the console. However, creation of IDs for topics present in the database continues normally. </span></p><p class="c0"><span class="c2"></span></p><h2 class="c5" id="h.bhybumhfpju8"><span class="c6">myProducer.registerForTopics(list)</span><span class="c3">: Registering for more topics</span></h2><p class="c1"><span class="c7">Registering for more topics is allowed. A producer can register for more topics by calling the `registerForTopics` function.</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c4">a = myProducer(topics = [&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">a.registerForTopics([&#39;t3&#39;])</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c8">This function first checks if the topic is not already registered, if it is it is simply ignored (and a message is printed on the console). Otherwise, we register the producer for this topic and generate an ID. The </span><span class="c6 c8">register</span><span class="c7">&nbsp;attribute with all the topics and consumer IDs is then returned.</span></p><p class="c0"><span class="c2"></span></p><h2 class="c5" id="h.8c7auj1c4g0q"><span class="c6">myProducer.login(dict)</span><span class="c3">: Logging in</span></h2><p class="c1"><span class="c7">For producers to login with their topic-specific IDs to a given topic, they can use the login functionality</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c4">a = myProducer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">a.login({</span></p><p class="c1"><span class="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;t3&#39;: 4920342034, </span></p><p class="c1"><span class="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;t4&#39;: 4932053405</span></p><p class="c1"><span class="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c7">The above command checks if these IDs are valid and then adds these ids to the producer. </span></p><p class="c1"><span class="c2">&nbsp;</span></p><h2 class="c5" id="h.x5dity8voqfl"><span class="c6">myProducer.getID(topic)</span><span class="c3">: Getting the Producer IDs for a topic</span></h2><p class="c1"><span class="c7">This function is used to retrieve the topic-specific producer ID. It returns a `dict` with topic names as keys and IDs as values.</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c4">a = myProducer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c6">id_dict = a.getID(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><h2 class="c5" id="h.norcx1jsjdch"><span class="c6">myProducer.getIDs(topic)</span><span class="c3">: Getting the Producer IDs for a topic</span></h2><p class="c1"><span class="c7">This function is used to retrieve the topic-specific producer ID for multiple topics. It returns a `dict` with topic names as keys and IDs as values.</span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c4">a = myProducer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">id_dict2 = a.getIDs([&#39;t1&#39;, &#39;t2&#39;]) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns dict()</span></p><h2 class="c5" id="h.65n8juux9t2q"><span class="c6">myProducer.sendNewMessage(topic, message, partition = None)</span><span class="c3">: Send a message</span></h2><p class="c1"><span class="c7">This function sends a message to the partition specific queue if the partition is specified or the message is sent into a random partition and the response from the broker is returned. If the message is not sent, an error message is printed. </span></p><p class="c0"><span class="c2"></span></p><p class="c1"><span class="c4">a = myProducer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1 c15"><span class="c4">a.sendNewMessage(&#39;t1&#39;, partition = None)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns the response &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from the brokers </span></p><h2 class="c5" id="h.mczecutg2c05"><span class="c6">myProducer.getAllTopics()</span><span class="c3">: Returns a list of all topics</span></h2><p class="c1"><span class="c7">This function returns the list of all topics. </span></p><p class="c0"><span class="c7"></span></p><p class="c1"><span class="c4">a = myProducer(topics[&#39;t1&#39;, &#39;t2&#39;], broker = &#39;localhost:5000&#39;)</span></p><p class="c1"><span class="c4">topics = a.getAllTopics(&#39;t1&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns list</span></p><p class="c0"><span class="c4"></span></p><p class="c0"><span class="c2"></span></p><p class="c0"><span class="c2"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c2"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p><p class="c0"><span class="c7"></span></p></body></html>